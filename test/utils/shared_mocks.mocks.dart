// Mocks generated by Mockito 5.3.2 from annotations
// in suggest_a_feature/test/utils/shared_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_bloc/flutter_bloc.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:suggest_a_feature/src/data/repositories/suggestion_repository.dart'
    as _i5;
import 'package:suggest_a_feature/src/domain/entities/comment.dart' as _i9;
import 'package:suggest_a_feature/src/domain/entities/suggestion.dart' as _i7;
import 'package:suggest_a_feature/src/domain/entities/suggestion_author.dart'
    as _i8;
import 'package:suggest_a_feature/src/domain/interactors/suggestion_interactor.dart'
    as _i10;
import 'package:suggest_a_feature/src/domain/utils/wrapper.dart' as _i2;
import 'package:suggest_a_feature/src/presentation/pages/suggestion/suggestion_cubit.dart'
    as _i11;
import 'package:suggest_a_feature/src/presentation/pages/suggestion/suggestion_state.dart'
    as _i3;
import 'package:suggest_a_feature/src/presentation/pages/suggestions/suggestions_cubit.dart'
    as _i14;
import 'package:suggest_a_feature/src/presentation/pages/suggestions/suggestions_state.dart'
    as _i4;
import 'package:suggest_a_feature/src/presentation/utils/typedefs.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWrapper_0<T> extends _i1.SmartFake implements _i2.Wrapper<T> {
  _FakeWrapper_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSuggestionState_1 extends _i1.SmartFake
    implements _i3.SuggestionState {
  _FakeSuggestionState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSuggestionsState_2 extends _i1.SmartFake
    implements _i4.SuggestionsState {
  _FakeSuggestionsState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SuggestionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSuggestionRepository extends _i1.Mock
    implements _i5.SuggestionRepository {
  MockSuggestionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<List<_i7.Suggestion>> get suggestionsStream => (super.noSuchMethod(
        Invocation.getter(#suggestionsStream),
        returnValue: _i6.Stream<List<_i7.Suggestion>>.empty(),
      ) as _i6.Stream<List<_i7.Suggestion>>);
  @override
  List<_i7.Suggestion> get suggestions => (super.noSuchMethod(
        Invocation.getter(#suggestions),
        returnValue: <_i7.Suggestion>[],
      ) as List<_i7.Suggestion>);
  @override
  Map<String, _i8.SuggestionAuthor?> get userInfo => (super.noSuchMethod(
        Invocation.getter(#userInfo),
        returnValue: <String, _i8.SuggestionAuthor?>{},
      ) as Map<String, _i8.SuggestionAuthor?>);
  @override
  void refreshSuggestions(
    _i7.Suggestion? suggestion, {
    bool? saveComments = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #refreshSuggestions,
          [suggestion],
          {#saveComments: saveComments},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void initSuggestions() => super.noSuchMethod(
        Invocation.method(
          #initSuggestions,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<_i2.Wrapper<_i7.Suggestion>> getSuggestionById(
          int? suggestionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSuggestionById,
          [suggestionId],
        ),
        returnValue: _i6.Future<_i2.Wrapper<_i7.Suggestion>>.value(
            _FakeWrapper_0<_i7.Suggestion>(
          this,
          Invocation.method(
            #getSuggestionById,
            [suggestionId],
          ),
        )),
      ) as _i6.Future<_i2.Wrapper<_i7.Suggestion>>);
  @override
  _i6.Future<_i2.Wrapper<_i7.Suggestion>> createSuggestion(
          _i7.CreateSuggestionModel? suggestion) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSuggestion,
          [suggestion],
        ),
        returnValue: _i6.Future<_i2.Wrapper<_i7.Suggestion>>.value(
            _FakeWrapper_0<_i7.Suggestion>(
          this,
          Invocation.method(
            #createSuggestion,
            [suggestion],
          ),
        )),
      ) as _i6.Future<_i2.Wrapper<_i7.Suggestion>>);
  @override
  _i6.Future<_i2.Wrapper<_i7.Suggestion>> updateSuggestion(
          _i7.Suggestion? suggestion) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSuggestion,
          [suggestion],
        ),
        returnValue: _i6.Future<_i2.Wrapper<_i7.Suggestion>>.value(
            _FakeWrapper_0<_i7.Suggestion>(
          this,
          Invocation.method(
            #updateSuggestion,
            [suggestion],
          ),
        )),
      ) as _i6.Future<_i2.Wrapper<_i7.Suggestion>>);
  @override
  _i6.Future<void> deleteSuggestion(int? suggestionId) => (super.noSuchMethod(
        Invocation.method(
          #deleteSuggestion,
          [suggestionId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> addNotifyToUpdateUser(int? suggestionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNotifyToUpdateUser,
          [suggestionId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteNotifyToUpdateUser(int? suggestionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNotifyToUpdateUser,
          [suggestionId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void downvote(int? suggestionId) => super.noSuchMethod(
        Invocation.method(
          #downvote,
          [suggestionId],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void upvote(int? suggestionId) => super.noSuchMethod(
        Invocation.method(
          #upvote,
          [suggestionId],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<_i2.Wrapper<List<_i9.Comment>>> getAllComments(
          int? suggestionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllComments,
          [suggestionId],
        ),
        returnValue: _i6.Future<_i2.Wrapper<List<_i9.Comment>>>.value(
            _FakeWrapper_0<List<_i9.Comment>>(
          this,
          Invocation.method(
            #getAllComments,
            [suggestionId],
          ),
        )),
      ) as _i6.Future<_i2.Wrapper<List<_i9.Comment>>>);
  @override
  _i6.Future<_i2.Wrapper<_i9.Comment>> createComment(
          _i9.CreateCommentModel? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #createComment,
          [comment],
        ),
        returnValue: _i6.Future<_i2.Wrapper<_i9.Comment>>.value(
            _FakeWrapper_0<_i9.Comment>(
          this,
          Invocation.method(
            #createComment,
            [comment],
          ),
        )),
      ) as _i6.Future<_i2.Wrapper<_i9.Comment>>);
}

/// A class which mocks [SuggestionInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockSuggestionInteractor extends _i1.Mock
    implements _i10.SuggestionInteractor {
  MockSuggestionInteractor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<List<_i7.Suggestion>> get suggestionsStream => (super.noSuchMethod(
        Invocation.getter(#suggestionsStream),
        returnValue: _i6.Stream<List<_i7.Suggestion>>.empty(),
      ) as _i6.Stream<List<_i7.Suggestion>>);
  @override
  Map<String, _i8.SuggestionAuthor?> get userInfo => (super.noSuchMethod(
        Invocation.getter(#userInfo),
        returnValue: <String, _i8.SuggestionAuthor?>{},
      ) as Map<String, _i8.SuggestionAuthor?>);
  @override
  void initSuggestions() => super.noSuchMethod(
        Invocation.method(
          #initSuggestions,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<_i2.Wrapper<_i7.Suggestion>> createSuggestion(
          _i7.CreateSuggestionModel? suggestion) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSuggestion,
          [suggestion],
        ),
        returnValue: _i6.Future<_i2.Wrapper<_i7.Suggestion>>.value(
            _FakeWrapper_0<_i7.Suggestion>(
          this,
          Invocation.method(
            #createSuggestion,
            [suggestion],
          ),
        )),
      ) as _i6.Future<_i2.Wrapper<_i7.Suggestion>>);
  @override
  _i6.Future<_i2.Wrapper<_i7.Suggestion>> updateSuggestion(
          _i7.Suggestion? suggestion) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSuggestion,
          [suggestion],
        ),
        returnValue: _i6.Future<_i2.Wrapper<_i7.Suggestion>>.value(
            _FakeWrapper_0<_i7.Suggestion>(
          this,
          Invocation.method(
            #updateSuggestion,
            [suggestion],
          ),
        )),
      ) as _i6.Future<_i2.Wrapper<_i7.Suggestion>>);
  @override
  _i6.Future<void> deleteSuggestion(int? suggestionId) => (super.noSuchMethod(
        Invocation.method(
          #deleteSuggestion,
          [suggestionId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void upvote(int? suggestionId) => super.noSuchMethod(
        Invocation.method(
          #upvote,
          [suggestionId],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void downvote(int? suggestionId) => super.noSuchMethod(
        Invocation.method(
          #downvote,
          [suggestionId],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> addNotifyToUpdateUser(int? suggestionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNotifyToUpdateUser,
          [suggestionId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteNotifyToUpdateUser(int? suggestionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNotifyToUpdateUser,
          [suggestionId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void refreshSuggestions(
    _i7.Suggestion? suggestion, {
    bool? saveComments = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #refreshSuggestions,
          [suggestion],
          {#saveComments: saveComments},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<_i2.Wrapper<List<_i9.Comment>>> getAllComments(
          int? suggestionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllComments,
          [suggestionId],
        ),
        returnValue: _i6.Future<_i2.Wrapper<List<_i9.Comment>>>.value(
            _FakeWrapper_0<List<_i9.Comment>>(
          this,
          Invocation.method(
            #getAllComments,
            [suggestionId],
          ),
        )),
      ) as _i6.Future<_i2.Wrapper<List<_i9.Comment>>>);
  @override
  _i6.Future<_i2.Wrapper<_i9.Comment>> createComment(
          _i9.CreateCommentModel? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #createComment,
          [comment],
        ),
        returnValue: _i6.Future<_i2.Wrapper<_i9.Comment>>.value(
            _FakeWrapper_0<_i9.Comment>(
          this,
          Invocation.method(
            #createComment,
            [comment],
          ),
        )),
      ) as _i6.Future<_i2.Wrapper<_i9.Comment>>);
}

/// A class which mocks [SuggestionCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSuggestionCubit extends _i1.Mock implements _i11.SuggestionCubit {
  MockSuggestionCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SuggestionState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSuggestionState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.SuggestionState);
  @override
  _i6.Stream<_i3.SuggestionState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i3.SuggestionState>.empty(),
      ) as _i6.Stream<_i3.SuggestionState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void init(
    _i7.Suggestion? suggestion,
    _i12.OnGetUserById? getUserById,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #init,
          [
            suggestion,
            getUserById,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void openCreateEditBottomSheet() => super.noSuchMethod(
        Invocation.method(
          #openCreateEditBottomSheet,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void openConfirmationBottomSheet() => super.noSuchMethod(
        Invocation.method(
          #openConfirmationBottomSheet,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void openEditDeleteBottomSheet() => super.noSuchMethod(
        Invocation.method(
          #openEditDeleteBottomSheet,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void openNotificationBottomSheet() => super.noSuchMethod(
        Invocation.method(
          #openNotificationBottomSheet,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void openCreateCommentBottomSheet() => super.noSuchMethod(
        Invocation.method(
          #openCreateCommentBottomSheet,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void closeBottomSheet() => super.noSuchMethod(
        Invocation.method(
          #closeBottomSheet,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void showSavingResultMessage(_i6.Future<bool>? isSuccess) =>
      super.noSuchMethod(
        Invocation.method(
          #showSavingResultMessage,
          [isSuccess],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void createComment(
    String? text,
    bool? isAnonymous,
    _i12.OnGetUserById? getUserById,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #createComment,
          [
            text,
            isAnonymous,
            getUserById,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void deleteSuggestion() => super.noSuchMethod(
        Invocation.method(
          #deleteSuggestion,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void vote() => super.noSuchMethod(
        Invocation.method(
          #vote,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changeNotification(bool? isNotificationOn) => super.noSuchMethod(
        Invocation.method(
          #changeNotification,
          [isNotificationOn],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i3.SuggestionState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i13.Change<_i3.SuggestionState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [SuggestionsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSuggestionsCubit extends _i1.Mock implements _i14.SuggestionsCubit {
  MockSuggestionsCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.SuggestionsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSuggestionsState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.SuggestionsState);
  @override
  _i6.Stream<_i4.SuggestionsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i4.SuggestionsState>.empty(),
      ) as _i6.Stream<_i4.SuggestionsState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void vote(
    _i7.SuggestionStatus? status,
    int? i,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #vote,
          [
            status,
            i,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void openCreateBottomSheet() => super.noSuchMethod(
        Invocation.method(
          #openCreateBottomSheet,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void closeCreateBottomSheet() => super.noSuchMethod(
        Invocation.method(
          #closeCreateBottomSheet,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changeActiveTab(_i7.SuggestionStatus? activeTab) => super.noSuchMethod(
        Invocation.method(
          #changeActiveTab,
          [activeTab],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i4.SuggestionsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i13.Change<_i4.SuggestionsState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
